// Mocks generated by Mockito 5.4.6 from annotations
// in nexust/test/mocks/mock_settings_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nexust/domain/entities/settings_entity.dart' as _i2;
import 'package:nexust/domain/repositories/settings_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsEntity_0 extends _i1.SmartFake
    implements _i2.SettingsEntity {
  _FakeSettingsEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i3.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SettingsEntity> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: _i4.Future<_i2.SettingsEntity>.value(
              _FakeSettingsEntity_0(this, Invocation.method(#getSettings, [])),
            ),
          )
          as _i4.Future<_i2.SettingsEntity>);

  @override
  _i4.Future<void> saveSettings(_i2.SettingsEntity? settings) =>
      (super.noSuchMethod(
            Invocation.method(#saveSettings, [settings]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
